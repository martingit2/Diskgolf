/**
 * Filnavn: schema.prisma
 * Beskrivelse: Prisma-datamodell for DiskGolf-applikasjonen.
 * Inkluderer brukere, baner, runder, anmeldelser og autentiseringsrelaterte data.
 * Utvikler: Martin Pettersen
 */

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  CLUB_LEADER
}

model User {
  id              String    @id @default(uuid()) // Unik identifikator
  name            String?  // Brukerens fulle navn
  email           String?  @unique // E-postadresse
  emailVerified   DateTime? // Når e-posten ble verifisert
  image           String?  // URL til profilbilde
  hashedPassword  String?  // Kryptert passord
  createdAt       DateTime @default(now()) // Tidsstempel for opprettelse
  updatedAt       DateTime @updatedAt // Automatisk oppdatert tidsstempel
  favoriteCourses String[] // Liste over ID-er til favorittbaner
  role            UserRole @default(USER) // Brukerens rolle (admin, user, etc.)

  clubs           Club[]  @relation("ClubAdmins") // Relasjon til klubbene som brukeren er admin for

  accounts Account[]
  rounds   Round[]
  reviews  Review[]
  memberships     Membership[] // Relasjon til Membership

  isTwoFactorEnable     Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  tournaments     Tournament[] @relation("TournamentParticipants") // Relasjon til Tournament
 games            Game[]
  gameParticipations GameParticipation[]
  gameScores       GameScore[]
  rooms            Room[]
  completedGameScores CompletedGameScore[]
  organizedTournaments Tournament[] @relation("TournamentOrganizer") 
  tournamentScores TournamentScore[] 
  tournamentGameParticipations TournamentGameParticipation[] @relation("UserTournamentGameParticipations")
  tournamentGameScores         TournamentGameScore[]         @relation("UserTournamentGameScores")
}

model Club {
  id          String   @id @default(uuid()) // Unik identifikator
  name        String   @unique
  location    String   // Tidligere "sted" som vi nå har lagt til i frontend og Zod
  description String?  // Beskrivelse av klubben
  email       String?  // E-postadresse for klubben
  logoUrl     String?  // Logo URL for klubben
  imageUrl    String?  // Bilde URL for klubben (valgfritt)
  isActive    Boolean  @default(true) // Aktivitetstilstand for klubben
  established DateTime @default(now()) // Datoen klubben ble opprettet

  // Nye felter
  address     String?  // Klubbens adresse (valgfritt)
  phone       String?  // Klubbens telefonnummer (valgfritt)
  website     String?  // Klubbens nettside (valgfritt)
  postalCode  String?  // Postnummer (valgfritt)

  admins      User[]   @relation("ClubAdmins") // Relasjon til brukere som er admins for klubben
  courses     Course[] @relation("ClubToCourses") // Relasjon til klubbens baner
  memberships Membership[] // Relasjon til medlemskapene i klubben
  clubNews    ClubNews[] // Relasjon til ClubNews
  meetings    Meeting[]
  tournaments Tournament[] // Relasjon til Tournament

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ClubNews {
  id        String   @id @default(uuid()) // Unik ID for nyheten
  clubId    String   // Klubbens ID som nyheten tilhører
  title     String   // Tittel på nyheten
  content   String   // Innholdet i nyheten
  createdAt DateTime @default(now()) // Når nyheten ble opprettet
  imageUrl  String? 

  club      Club     @relation(fields: [clubId], references: [id]) // Relasjon til Club-modellen

  @@index([clubId]) // Lager en indeks for klubben for raskere spørringer
}



model Course {
  id          String   @id @default(uuid())
  name        String
  location    String?  // ✅ Ny: Fylke/by for banen
  latitude    Float    // ✅ Hovedposisjon for banen (f.eks. klubbhuset)
  longitude   Float
  startLatitude Float? // ✅ Ny: Startpunkt
  startLongitude Float?
  goalLatitude Float?  // ✅ Ny: Sluttpunkt
  goalLongitude Float?
  description String?
  par         Int
  image       String?
  difficulty  String?
  numHoles    Int?     // ✅ Ny: Antall kurver (baskets) på banen
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  holes   Hole[]
  reviews Review[]
  rounds  Round[]


// Relasjoner
  start       Start[]  @relation  // Flere tees per bane
  goal        Goal?    @relation  // Ett sluttpunkt per bane
  baskets     Basket[] @relation  // Flere kurver per bane
  obZones     OB[]     @relation  // Flere OB-soner per bane

  games    Game[]
  rooms    Room[]
  completedGameScores CompletedGameScore[]


  clubId String?
  club   Club?   @relation("ClubToCourses", fields: [clubId], references: [id])
  tournaments Tournament[]
}

model Hole {
  id        String @id @default(uuid())
  courseId  String
  number    Int   // ✅ Hullnummer (f.eks. 1, 2, 3 ...)
  par       Int   // ✅ Par-verdi for kurven
  distance  Int?  // ✅ Valgfri avstand i meter
  latitude  Float // ✅ Ny: Eksakte koordinater for kurven
  longitude Float

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Round {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  score     Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Membership {
  userId  String
  clubId  String
  user    User   @relation(fields: [userId], references: [id])
  club    Club   @relation(fields: [clubId], references: [id])
  isPrimary Boolean @default(false) 
  @@id([userId, clubId]) // Sett en sammensatt primærnøkkel
}


model Start {  // Flere tees per bane
  id        String   @id @default(uuid())
  courseId  String   // Relasjon til Course
  latitude  Float
  longitude Float
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Goal {  // Ett sluttpunkt per bane
  id        String   @id @default(uuid())
  courseId  String   @unique  // En bane kan kun ha ett sluttpunkt
  latitude  Float
  longitude Float
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Basket {  // Flere kurver per bane
  id        String   @id @default(uuid())
  courseId  String   // Relasjon til Course
  latitude  Float
  longitude Float
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model OB {
  id        String   @id @default(uuid())
  courseId  String   // Relasjon til Course
  latitude  Float?   // Valgfritt: For enkle OB-soner (sirkler)
  longitude Float?   // Valgfritt: For enkle OB-soner (sirkler)
  points    Json?    // Valgfritt: Array av koordinater for polygoner
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Meeting {
  id          String   @id @default(uuid()) // Unik ID for møtet
  clubId      String   // Klubbens ID som møtet tilhører
  title       String   // Tittel på møtet
  description String   // Beskrivelse av møtet
  pdfUrl      String?  // URL til PDF-fil for referatet
  createdAt   DateTime @default(now()) // Når møtet ble opprettet

  club        Club     @relation(fields: [clubId], references: [id]) // Relasjon til Club-modellen

  @@index([clubId]) // Lager en indeks for klubben for raskere spørringer
}


model Game {
  id          String   @id @default(uuid())
  courseId    String
  password    String?
  course      Course   @relation(fields: [courseId], references: [id])
  gameMode    String
  ownerId     String?  
  owner       User?    @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerName   String?  
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  maxPlayers  Int?

  participants GameParticipation[]
  scores       GameScore[]
  room         Room?    @relation(fields: [roomId], references: [id])
  roomId       String?  @unique
}


model GameParticipation {
  id          String   @id @default(uuid())
  gameId      String?
  game        Game?    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  roomId      String?
  room        Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  playerName  String
  createdAt   DateTime @default(now())
  isReady     Boolean  @default(false)
}


model GameScore {
  id         String  @id @default(uuid())
  gameId     String
  game       Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId     String?
  user       User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  holeNumber Int
  strokes    Int
  obCount    Int
  playerName String  // Endret fra String? til String
  createdAt  DateTime @default(now())

  @@unique([gameId, holeNumber, userId, playerName], name: "game_score_unique")
}

model Room {
  id          String   @id @default(uuid())
  name        String
  passwordHash String?
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  ownerId     String?
  owner       User?    @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerName   String
  maxPlayers  Int
  isActive    Boolean  @default(true)
  status      String   @default("waiting")
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  participants GameParticipation[]
  game         Game?    
  gameId       String?  @unique
}

model CompletedGameScore {
  id        String  @id @default(uuid())
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  userId    String? // Gjør optional for konsistens
  user      User?   @relation(fields: [userId], references: [id])
  playerName String // Legg til for å lagre gjestenavn
  holeNumber Int
  strokes    Int
  obCount    Int
  createdAt  DateTime @default(now())
}


enum TournamentStatus {
  PLANNING
  REGISTRATION_OPEN
  IN_PROGRESS
  COMPLETED
}

model Tournament {
  id              String          @id @default(uuid())
  name            String
  description     String
  location        String
  startDate       DateTime
  endDate         DateTime?
  status          TournamentStatus @default(PLANNING)
  maxParticipants Int?
  image           String?
  
  // Banerelasjon
  courseId        String
  course          Course          @relation(fields: [courseId], references: [id])
  
  // Organisasjonsrelasjoner
  organizerId     String
  organizer       User            @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  clubId          String?
  club            Club?           @relation(fields: [clubId], references: [id])
  
  // Deltakerrelasjon
  participants    User[]          @relation("TournamentParticipants") 
  gameSessions TournamentGameSession[] @relation("TournamentGameSessions")

  // Resultatrelasjon (enkel)
  scores          TournamentScore[]
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model TournamentScore {
  id            String     @id @default(uuid())
  tournamentId  String
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  playerId      String
  player        User       @relation(fields: [playerId], references: [id])
  
  // Enkel scorelagring - kan utvides senere
  totalScore    Int        // Totalt antall kast (inkl OB)
  totalOb       Int        // Totalt antall OB
  strokes       Json       // JSON med detaljerte resultater per hull
  
  submittedAt   DateTime   @default(now())
  isVerified    Boolean    @default(false)
}


// Representerer en spesifikk runde/økt innenfor en turnering
model TournamentGameSession {
  id            String     @id @default(uuid())
  tournamentId  String
  tournament    Tournament @relation("TournamentGameSessions", fields: [tournamentId], references: [id])
  roundNumber   Int        // F.eks. 1, 2 (hvis turneringen har flere runder)
  status        String     @default("waiting") // waiting, inProgress, completed
  createdAt     DateTime   @default(now())
  expiresAt     DateTime   // Når sesjonen utløper

  participants TournamentGameParticipation[]
  scores       TournamentGameScore[]

  @@unique([tournamentId, roundNumber]) // Én sesjon per runde i turneringen
}

// Representerer en spillers deltakelse i en spesifikk turneringsrunde
model TournamentGameParticipation {
  id                String              @id @default(uuid())
  gameSessionId     String
  gameSession       TournamentGameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  playerId          String              // Kobling til User-modellen
  player            User                @relation("UserTournamentGameParticipations", fields: [playerId], references: [id])
  isReady           Boolean             @default(false)
  // Kan legge til score-relatert info her hvis det forenkler, f.eks. currentHole

  @@unique([gameSessionId, playerId])
}


// Lagrer score per hull for en spiller i en turneringsrunde
model TournamentGameScore {
  id            String    @id @default(uuid())
  gameSessionId String
  gameSession   TournamentGameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  playerId      String
  player        User      @relation("UserTournamentGameScores", fields: [playerId], references: [id])
  holeNumber    Int
  strokes       Int
  obCount       Int
  createdAt     DateTime  @default(now())

  @@unique([gameSessionId, playerId, holeNumber])
}
