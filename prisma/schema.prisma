/**
 * Filnavn: schema.prisma
 * Beskrivelse: Prisma-datamodell for DiskGolf-applikasjonen.
 * Inkluderer brukere, baner, runder, anmeldelser og autentiseringsrelaterte data.
 * Utvikler: Martin Pettersen
 */

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  CLUB_LEADER
}

enum TournamentType {
  USER
  CLUB
}

model User {
  id              String    @id @default(uuid()) // Unik identifikator
  name            String?  // Brukerens fulle navn
  email           String?  @unique // E-postadresse
  emailVerified   DateTime? // Når e-posten ble verifisert
  image           String?  // URL til profilbilde
  hashedPassword  String?  // Kryptert passord
  createdAt       DateTime @default(now()) // Tidsstempel for opprettelse
  updatedAt       DateTime @updatedAt // Automatisk oppdatert tidsstempel
  favoriteCourses String[] // Liste over ID-er til favorittbaner
  role            UserRole @default(USER) // Brukerens rolle (admin, user, etc.)

  clubs           Club[]  @relation("ClubAdmins") // Relasjon til klubbene som brukeren er admin for

  accounts Account[]
  rounds   Round[]
  reviews  Review[]
  memberships     Membership[] // Relasjon til Membership

  isTwoFactorEnable     Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  tournaments     Tournament[] @relation("TournamentParticipants") // Relasjon til Tournament
}

model Club {
  id          String   @id @default(uuid()) // Unik identifikator
  name        String   @unique
  location    String   // Tidligere "sted" som vi nå har lagt til i frontend og Zod
  description String?  // Beskrivelse av klubben
  email       String?  // E-postadresse for klubben
  logoUrl     String?  // Logo URL for klubben
  imageUrl    String?  // Bilde URL for klubben (valgfritt)
  isActive    Boolean  @default(true) // Aktivitetstilstand for klubben
  established DateTime @default(now()) // Datoen klubben ble opprettet

  // Nye felter
  address     String?  // Klubbens adresse (valgfritt)
  phone       String?  // Klubbens telefonnummer (valgfritt)
  website     String?  // Klubbens nettside (valgfritt)
  postalCode  String?  // Postnummer (valgfritt)

  admins      User[]   @relation("ClubAdmins") // Relasjon til brukere som er admins for klubben
  courses     Course[] @relation("ClubToCourses") // Relasjon til klubbens baner
  memberships Membership[] // Relasjon til medlemskapene i klubben
  clubNews    ClubNews[] // Relasjon til ClubNews
  meetings    Meeting[]
  tournaments Tournament[] // Relasjon til Tournament

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ClubNews {
  id        String   @id @default(uuid()) // Unik ID for nyheten
  clubId    String   // Klubbens ID som nyheten tilhører
  title     String   // Tittel på nyheten
  content   String   // Innholdet i nyheten
  createdAt DateTime @default(now()) // Når nyheten ble opprettet
  imageUrl  String? 

  club      Club     @relation(fields: [clubId], references: [id]) // Relasjon til Club-modellen

  @@index([clubId]) // Lager en indeks for klubben for raskere spørringer
}



model Course {
  id          String   @id @default(uuid())
  name        String
  location    String?  // ✅ Ny: Fylke/by for banen
  latitude    Float    // ✅ Hovedposisjon for banen (f.eks. klubbhuset)
  longitude   Float
  startLatitude Float? // ✅ Ny: Startpunkt
  startLongitude Float?
  goalLatitude Float?  // ✅ Ny: Sluttpunkt
  goalLongitude Float?
  description String?
  par         Int
  image       String?
  difficulty  String?
  numHoles    Int?     // ✅ Ny: Antall kurver (baskets) på banen
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  holes   Hole[]
  reviews Review[]
  rounds  Round[]

// Relasjoner
  start       Start[]  @relation  // Flere tees per bane
  goal        Goal?    @relation  // Ett sluttpunkt per bane
  baskets     Basket[] @relation  // Flere kurver per bane
  obZones     OB[]     @relation  // Flere OB-soner per bane


  clubId String?
  club   Club?   @relation("ClubToCourses", fields: [clubId], references: [id])
}

model Hole {
  id        String @id @default(uuid())
  courseId  String
  number    Int   // ✅ Hullnummer (f.eks. 1, 2, 3 ...)
  par       Int   // ✅ Par-verdi for kurven
  distance  Int?  // ✅ Valgfri avstand i meter
  latitude  Float // ✅ Ny: Eksakte koordinater for kurven
  longitude Float

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Round {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  score     Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Tournament {
  id              String         @id @default(uuid())
  name            String
  type            TournamentType
  location        String         // Sjekk at dette feltet eksisterer
  description     String
  dateTime        DateTime
  maxParticipants Int
  image           String?
  participants    User[]         @relation("TournamentParticipants")
  clubId          String?
  club            Club?          @relation(fields: [clubId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Membership {
  userId  String
  clubId  String
  user    User   @relation(fields: [userId], references: [id])
  club    Club   @relation(fields: [clubId], references: [id])
  isPrimary Boolean @default(false) 
  @@id([userId, clubId]) // Sett en sammensatt primærnøkkel
}


model Start {  // Flere tees per bane
  id        String   @id @default(uuid())
  courseId  String   // Relasjon til Course
  latitude  Float
  longitude Float
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Goal {  // Ett sluttpunkt per bane
  id        String   @id @default(uuid())
  courseId  String   @unique  // En bane kan kun ha ett sluttpunkt
  latitude  Float
  longitude Float
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Basket {  // Flere kurver per bane
  id        String   @id @default(uuid())
  courseId  String   // Relasjon til Course
  latitude  Float
  longitude Float
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model OB {
  id        String   @id @default(uuid())
  courseId  String   // Relasjon til Course
  latitude  Float?   // Valgfritt: For enkle OB-soner (sirkler)
  longitude Float?   // Valgfritt: For enkle OB-soner (sirkler)
  points    Json?    // Valgfritt: Array av koordinater for polygoner
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Meeting {
  id          String   @id @default(uuid()) // Unik ID for møtet
  clubId      String   // Klubbens ID som møtet tilhører
  title       String   // Tittel på møtet
  description String   // Beskrivelse av møtet
  pdfUrl      String?  // URL til PDF-fil for referatet
  createdAt   DateTime @default(now()) // Når møtet ble opprettet

  club        Club     @relation(fields: [clubId], references: [id]) // Relasjon til Club-modellen

  @@index([clubId]) // Lager en indeks for klubben for raskere spørringer
}