generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id             String   @id @default(uuid()) // Unik identifikator
  name           String?  // Brukerens fulle navn
  email          String?  @unique // E-postadresse, må være unik
  emailVerified  DateTime? // Når e-posten ble verifisert
  image          String?  // URL til profilbilde
  hashedPassword String?  // Kryptert passord
  createdAt      DateTime @default(now()) // Tidsstempel for opprettelse
  updatedAt      DateTime @updatedAt // Automatisk oppdatert tidsstempel
  favoriteCourses String[] // Liste over ID-er til favorittbaner

  accounts Account[]
  rounds   Round[]
  reviews  Review[]
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Course {
  id          String   @id @default(uuid())
  name        String
  location    String
  description String?
  par         Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  holes   Hole[]
  reviews Review[]
  rounds  Round[]
}

model Hole {
  id       String @id @default(uuid())
  courseId String
  number   Int
  par      Int
  distance Int?

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Round {
  id       String   @id @default(uuid())
  userId   String
  courseId String
  score    Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Review {
  id       String   @id @default(uuid())
  userId   String
  courseId String
  rating   Int
  comment  String?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}
